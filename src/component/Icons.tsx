import { Icon, IconButton, IconProps, Text, ButtonProps, IconButtonProps } from "@chakra-ui/react";
import { useContext } from "react";
import { useLocation } from "react-router-dom";
import { Ctx } from "../commen/context";

// 待修改 FIXME:套過theme去控制顏色
// 試過把直接修改 <Image fill="#..." /> 的fill顏色,此方法一直都是失敗的... 

interface MyIconProps {
  pathName: string
}

export const PairIcon = ({ pathName, boxSize }: MyIconProps & IconProps) => {
  //get fill colors
  const ctx = useContext(Ctx)
  //determine fill color 
  const location = useLocation()

  const getFillColor = () => pathName === location.pathname ? ctx.topSvgFillColor : ctx.topSvgDefaultColor

  return (
    <Icon boxSize={boxSize}>
      <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fillRule="evenodd"
          clipRule="evenodd"
          d="M24.2091 5.09137C24.9868 5.2829 25.4627 6.07223 25.2654 6.84995L21.7134 20.9999C21.5509 21.6441 20.9763 22.0968 20.3089 22.0968C20.1928 22.0968 20.0709 22.0794 19.9548 22.0504L10.4713 19.6708C10.094 19.5779 9.7748 19.3399 9.57747 19.0091C9.38014 18.6783 9.3221 18.2894 9.41496 17.9122L12.9669 3.76228C13.1295 3.11805 13.704 2.66534 14.3715 2.66534C14.4876 2.66534 14.6094 2.68276 14.7255 2.71178L24.2091 5.09137ZM7.52514 17.7032C7.21753 18.9452 7.97204 20.2047 9.21407 20.5181L11.6169 21.1159L7.06083 22.7816C6.89832 22.8397 6.73 22.8687 6.56169 22.8687C5.95228 22.8687 5.40672 22.4856 5.19778 21.9168L0.781011 9.84473C0.647521 9.47909 0.659129 9.08442 0.827442 8.73619C0.995755 8.38795 1.28595 8.12098 1.64579 7.98749L9.60293 5.07393C9.76544 5.01589 9.93375 4.98687 10.1021 4.98687C10.3052 4.98687 10.5025 5.0333 10.6825 5.11456L7.52514 17.7032Z"
          fill={getFillColor()}
        />
      </svg>
    </Icon>
  )
}

export const FavoriteIcon = ({ pathName, boxSize }: MyIconProps & IconProps) => {
  //get fill colors
  const ctx = useContext(Ctx)
  //determine fill color 
  const location = useLocation()

  const getFillColor = () => pathName === location.pathname ? ctx.topSvgFillColor : ctx.topSvgDefaultColor

  return (
    <Icon boxSize={boxSize}>
      <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fillRule="evenodd"
          clipRule="evenodd"
          d="M12 22.5405C11.8487 22.5413 11.6987 22.5123 11.5586 22.4551C11.4185 22.3979 11.2911 22.3136 11.1836 22.207L2.2493 13.2612C1.12862 12.1288 0.5 10.5999 0.5 9.00676C0.5 7.41357 1.12862 5.88472 2.2493 4.75233C3.37875 3.62607 4.9087 2.99361 6.50374 2.99361C8.09877 2.99361 9.62872 3.62607 10.7582 4.75233L12 5.99416L13.2418 4.75233C14.3713 3.62607 15.9012 2.99361 17.4963 2.99361C19.0913 2.99361 20.6212 3.62607 21.7507 4.75233C22.8714 5.88472 23.5 7.41357 23.5 9.00676C23.5 10.5999 22.8714 12.1288 21.7507 13.2612L12.8164 22.207C12.709 22.3136 12.5815 22.3979 12.4414 22.4551C12.3013 22.5123 12.1513 22.5413 12 22.5405ZM6.50374 5.29276C6.01698 5.29055 5.53462 5.38495 5.0846 5.57049C4.63459 5.75602 4.22586 6.029 3.88209 6.37361C3.18765 7.07171 2.79782 8.01634 2.79782 9.00101C2.79782 9.98568 3.18765 10.9303 3.88209 11.6284L12 19.7578L20.1179 11.6284C20.8124 10.9303 21.2022 9.98568 21.2022 9.00101C21.2022 8.01634 20.8124 7.07171 20.1179 6.37361C19.4092 5.70407 18.4712 5.33104 17.4963 5.33104C16.5213 5.33104 15.5833 5.70407 14.8746 6.37361L12.8164 8.44334C12.7095 8.55111 12.5823 8.63665 12.4422 8.69503C12.3021 8.7534 12.1518 8.78346 12 8.78346C11.8482 8.78346 11.6979 8.7534 11.5578 8.69503C11.4177 8.63665 11.2905 8.55111 11.1836 8.44334L9.12538 6.37361C8.78161 6.029 8.37288 5.75602 7.92287 5.57049C7.47285 5.38495 6.99049 5.29055 6.50374 5.29276Z"
          fill={getFillColor()}
        />
      </svg>
    </Icon>
  )
}

export const TypeIcon = ({ pathName, boxSize }: MyIconProps & IconProps) => {
  //get fill colors
  const ctx = useContext(Ctx)
  //determine fill color 
  const location = useLocation()

  const getFillColor = () => pathName === location.pathname ? ctx.topSvgFillColor : ctx.topSvgDefaultColor

  return (
    <Icon boxSize={boxSize}>
      <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fillRule="evenodd"
          clipRule="evenodd"
          d="M20.728 4.81542C19.5759 3.67137 18.2068 2.76897 16.7011 2.16119C15.1955 1.5534 13.5836 1.25248 11.9601 1.27607C8.91241 1.26845 5.98651 2.47184 3.82607 4.62151C1.66563 6.77117 0.447628 9.69103 0.440009 12.7387C0.43239 15.7864 1.63578 18.7123 3.78544 20.8728C5.93511 23.0332 8.85496 24.2512 11.9027 24.2588C12.5594 24.27 13.2012 24.0628 13.7274 23.6697C14.2536 23.2766 14.6344 22.7199 14.81 22.087C14.9219 21.6299 14.9207 21.1524 14.8066 20.6959C14.6925 20.2394 14.4688 19.8176 14.155 19.4669C14.0824 19.3844 14.0351 19.2827 14.0185 19.174C14.002 19.0653 14.017 18.9542 14.0618 18.8537C14.1066 18.7533 14.1792 18.6679 14.2711 18.6075C14.363 18.5471 14.4702 18.5144 14.5802 18.5132H16.4762C18.2608 18.5215 19.9824 17.8544 21.2954 16.6458C22.6085 15.4372 23.4157 13.7767 23.5549 11.9975C23.5977 10.671 23.369 9.34968 22.8829 8.11467C22.3968 6.87965 21.6635 5.75695 20.728 4.81542ZM16.5222 16.2149H14.6261C14.0724 16.2117 13.5296 16.3693 13.0637 16.6686C12.5978 16.9678 12.2287 17.3958 12.0012 17.9007C11.7737 18.4055 11.6976 18.9656 11.7821 19.5128C11.8666 20.0601 12.1081 20.5711 12.4772 20.9838C12.5491 21.0563 12.5999 21.147 12.6242 21.2462C12.6485 21.3454 12.6454 21.4493 12.6151 21.5469C12.5577 21.7882 12.2934 21.9376 11.9371 21.9606C10.6321 21.9438 9.34555 21.6494 8.16312 21.0969C6.98068 20.5444 5.92945 19.7464 5.07935 18.7561C4.22925 17.7657 3.59977 16.6057 3.23277 15.3532C2.86577 14.1007 2.76968 12.7844 2.95088 11.4919C3.27857 9.31998 4.3638 7.33391 6.01463 5.88496C7.66546 4.43602 9.77552 3.61756 11.9716 3.57435H12.0635C13.363 3.55734 14.6528 3.80074 15.8567 4.2902C17.0606 4.77966 18.1543 5.50527 19.0733 6.42421C19.7904 7.14173 20.3538 7.99779 20.7291 8.94019C21.1045 9.88259 21.284 10.8916 21.2566 11.9056C21.1377 13.0812 20.5885 14.1715 19.7146 14.9669C18.8408 15.7623 17.7038 16.2067 16.5222 16.2149ZM12.0632 8.17092C13.0152 8.17092 13.7869 7.39919 13.7869 6.44721C13.7869 5.49524 13.0152 4.72351 12.0632 4.72351C11.1112 4.72351 10.3395 5.49524 10.3395 6.44721C10.3395 7.39919 11.1112 8.17092 12.0632 8.17092ZM15.1145 7.98187C15.2652 7.67617 15.5032 7.42202 15.7983 7.25153C15.9945 7.13822 16.211 7.06469 16.4356 7.03513C16.6602 7.00557 16.8884 7.02057 17.1072 7.07927C17.326 7.13797 17.5311 7.23921 17.7107 7.37722C17.8903 7.51522 18.041 7.68728 18.1541 7.88355C18.3242 8.17888 18.403 8.51801 18.3805 8.8581C18.3579 9.19819 18.2351 9.52397 18.0274 9.79424C17.8198 10.0645 17.5367 10.2672 17.2139 10.3766C16.8911 10.486 16.5431 10.4972 16.2139 10.4089C15.8847 10.3206 15.5891 10.1367 15.3644 9.88038C15.1397 9.62409 14.9961 9.30694 14.9516 8.96902C14.9071 8.63109 14.9638 8.28757 15.1145 7.98187ZM8.32889 7.25159C8.03357 7.08143 7.69443 7.00265 7.35434 7.02519C7.01425 7.04773 6.68848 7.17059 6.4182 7.37824C6.14792 7.58589 5.94527 7.86901 5.83586 8.1918C5.72645 8.5146 5.71519 8.86259 5.80351 9.19178C5.89183 9.52098 6.07577 9.8166 6.33206 10.0413C6.58835 10.266 6.90551 10.4096 7.24343 10.4541C7.58135 10.4986 7.92487 10.4419 8.23057 10.2911C8.53627 10.1404 8.79043 9.90246 8.96091 9.60733C9.07422 9.41118 9.14776 9.19462 9.17731 8.97004C9.20687 8.74545 9.19187 8.51724 9.13317 8.29846C9.07448 8.07968 8.97323 7.87461 8.83522 7.69498C8.69722 7.51535 8.52516 7.36468 8.32889 7.25159ZM4.72182 12.6944C4.85072 12.3785 5.07044 12.108 5.35317 11.9171C5.5399 11.7892 5.75015 11.6996 5.97175 11.6534C6.19335 11.6073 6.42189 11.6055 6.64417 11.6483C6.86645 11.691 7.07804 11.7774 7.26672 11.9024C7.45539 12.0275 7.6174 12.1887 7.74337 12.3768C7.93513 12.6589 8.03885 12.9916 8.04141 13.3327C8.04396 13.6739 7.94524 14.0081 7.75774 14.2931C7.57023 14.5781 7.30238 14.801 6.9881 14.9337C6.67381 15.0663 6.32723 15.1028 5.99223 15.0383C5.65723 14.9739 5.34888 14.8115 5.10622 14.5718C4.86356 14.332 4.6975 14.0256 4.62907 13.6914C4.56065 13.3572 4.59293 13.0102 4.72182 12.6944Z"
          fill={getFillColor()}
        />
      </svg>
    </Icon>
  )
}

export const LetterIcon = ({ pathName, boxSize }: MyIconProps & IconProps) => {
  //get fill colors
  const ctx = useContext(Ctx)
  //determine fill color 
  const location = useLocation()

  const getFillColor = () => pathName === location.pathname ? ctx.topSvgFillColor : ctx.topSvgDefaultColor

  return (
    <Icon boxSize={boxSize}>
      <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fillRule="evenodd"
          clipRule="evenodd"
          d="M3.86714 12.7738C3.22218 12.813 2.57405 12.8452 1.93203 12.8383C1.65691 12.8347 1.37916 12.7532 1.12816 12.6598C0.65868 12.4885 0.519727 12.1764 0.713475 11.714C0.826277 11.4394 0.986852 11.1713 1.175 10.9315C1.90342 10.0046 2.83731 9.27043 3.80176 8.57605C5.88321 7.07877 8.14325 5.88663 10.5554 4.79131C13.1104 3.68579 15.7852 2.69574 18.6043 2.21204C19.389 2.07791 20.1883 2.03953 20.981 2.00146L21.0582 1.99775C21.3788 1.98327 21.7094 2.05401 22.0121 2.14361C22.597 2.31488 22.7766 2.67511 22.4999 3.21502C22.292 3.62169 22.0074 4.00483 21.7056 4.36359C21.4765 4.6365 21.2048 4.87898 20.9337 5.1209C20.876 5.1724 20.8183 5.22386 20.7611 5.2756C20.6727 5.35553 20.5424 5.41786 20.4242 5.44053C16.9365 6.08304 13.6377 7.30818 10.4425 8.85257C8.27273 9.90194 6.227 11.1483 4.3136 12.6006C4.19236 12.6931 4.01699 12.7647 3.86714 12.7738ZM23.1663 3.86732L23.3736 4.33278C23.466 4.54025 23.5574 4.74849 23.6489 4.95682C23.8712 5.46301 24.0937 5.96969 24.3302 6.46691C24.4915 6.80535 24.4588 7.12549 24.2823 7.45841C23.9216 8.13613 23.3715 8.67167 22.7928 9.18146C21.4572 10.3573 19.982 11.3539 18.4046 12.193C18.042 12.3865 17.6786 12.5782 17.3136 12.7664C18.3448 13.1577 19.2253 13.9453 19.7097 15.0331C20.6744 17.2 19.6999 19.7387 17.5331 20.7035C15.3662 21.6682 12.8275 20.6936 11.8627 18.5268C11.3871 17.4586 11.3848 16.3014 11.7615 15.2853C9.83456 16.0065 7.85736 16.562 5.81456 16.8454C5.0856 16.9456 4.34032 16.9419 3.60791 16.9239C2.9863 16.9101 2.54847 16.637 2.32608 16.0415C2.11607 15.4761 1.86276 14.9278 1.60475 14.3694C1.49294 14.1274 1.38025 13.8835 1.26982 13.6355C3.39721 13.9021 5.42719 13.4171 7.45078 12.8602C9.84436 12.1984 12.147 11.2843 14.3837 10.203C16.8544 9.00893 19.2282 7.65933 21.3259 5.89624C22.0224 5.31046 22.6541 4.67022 23.1663 3.86732ZM15.7575 18.3954C15.9108 18.7396 16.3154 18.895 16.6596 18.7417C17.0038 18.5885 17.1592 18.1838 17.0059 17.8396C16.8527 17.4954 16.448 17.3401 16.1038 17.4933C15.7596 17.6466 15.6043 18.0512 15.7575 18.3954ZM15.9909 17.2445C17.1537 16.7268 18.1177 15.7676 18.6085 14.4892L17.6961 14.1389C16.9075 16.1931 14.5962 17.2222 12.542 16.4336L12.1918 17.346C13.4702 17.8368 14.8281 17.7622 15.9909 17.2445Z"
          fill={getFillColor()}
        />
      </svg>
    </Icon>
  )
}

export const HospitalIcon = ({ pathName, boxSize }: MyIconProps & IconProps) => {
  //get fill colors
  const ctx = useContext(Ctx)
  //determine fill color 
  const location = useLocation()

  const getFillColor = () => pathName === location.pathname ? ctx.topSvgFillColor : ctx.topSvgDefaultColor

  return (
    <Icon boxSize={boxSize}>
      <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fillRule="evenodd"
          clipRule="evenodd"
          d="M16.8 6.76704L20.4 6.76704C22.392 6.76704 24 8.37504 24 10.367L24 19.967C24 21.959 22.392 23.567 20.4 23.567L3.6 23.567C1.608 23.567 0 21.959 0 19.967L0 10.367C0 8.37504 1.608 6.76704 3.6 6.76704H7.2V4.96704C7.2 3.31104 8.544 1.96704 10.2 1.96704L13.8 1.96704C15.456 1.96704 16.8 3.31104 16.8 4.96704V6.76704ZM10.2 4.36704C9.864 4.36704 9.6 4.63104 9.6 4.96704V6.76704L14.4 6.76704V4.96704C14.4 4.63104 14.136 4.36704 13.8 4.36704H10.2ZM20.4 21.167C21.06 21.167 21.6 20.627 21.6 19.967L21.6 10.367C21.6 9.70704 21.06 9.16704 20.4 9.16704L3.6 9.16704C2.94 9.16704 2.4 9.70704 2.4 10.367L2.4 19.967C2.4 20.627 2.94 21.167 3.6 21.167L20.4 21.167ZM13.1399 13.6911H15.2879C15.6479 13.6911 15.9359 13.9791 15.9359 14.3391V15.3231C15.9359 15.6831 15.6479 15.9711 15.2879 15.9711H13.1399V18.1191C13.1399 18.4791 12.8519 18.7671 12.4919 18.7671H11.5079C11.1479 18.7671 10.8599 18.4791 10.8599 18.1191V15.9711H8.71191C8.35191 15.9711 8.06391 15.6831 8.06391 15.3231V14.3391C8.06391 13.9791 8.35191 13.6911 8.71191 13.6911H10.8599V11.5431C10.8599 11.1831 11.1479 10.8951 11.5079 10.8951H12.4919C12.8519 10.8951 13.1399 11.1831 13.1399 11.5431V13.6911Z"
          fill={getFillColor()}
        />
      </svg>
    </Icon>
  )
}



//--------------------------------------------我是分隔線--------------------------------

export interface FilterButtonProps {
  value : string,
  isSelected: boolean,
  // selectedColor: string,
  // defaultColor: string,
  // onClicked : MouseEventHandler<HTMLButtonElement> 
} 


//--FilterIconBotton

export const FilterCatButton = ({ value , isSelected , onClick}: FilterButtonProps & ButtonProps) => {

  const ctx = useContext(Ctx)

  const fillColor = isSelected ? ctx.selectedColor : ctx.unselectedColor
  const bgColor = isSelected ? ctx.bgSelectedColor : ctx.bgDefaultColor

  return (
    <IconButton  aria-label={"filter-cat"} boxSize="20" shadow="sm" bgColor={bgColor} rounded="20" _hover={{ bgColor: bgColor }} m="8px" onClick={onClick} value={value} >
      <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg" >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M30.8466 22.5357C31.6235 23.0574 32.3228 23.6457 32.9333 24.3006C33.1997 24.5781 33.1775 25.0221 32.8889 25.2996C32.6225 25.5549 32.1674 25.5327 31.9121 25.2663C31.4015 24.7113 30.8244 24.2118 30.1806 23.7789C29.7477 24.456 29.2371 25.1109 28.6377 25.7103C29.6145 26.6538 30.4581 27.6749 31.1684 28.7516C31.2683 28.907 31.3016 29.0957 31.2683 29.2733C31.235 29.462 31.1241 29.6174 30.9687 29.7173C30.8577 29.7839 30.7245 29.8283 30.5913 29.8283C30.3582 29.8283 30.1473 29.7173 30.0141 29.5175C29.337 28.4852 28.5267 27.5196 27.6165 26.6427C27.5635 26.6824 27.5074 26.7253 27.4487 26.7701C27.2614 26.9132 27.0481 27.0762 26.8284 27.2199C24.9525 28.4519 22.6215 29.1623 19.9021 29.3177C16.6054 29.5064 12.3652 29.4509 8.97975 27.2199C8.74908 27.0731 8.53821 26.9065 8.3378 26.7481C8.32605 26.7388 8.31434 26.7296 8.30266 26.7204C7.41466 27.5861 6.62657 28.5185 5.98278 29.5064C5.77188 29.8172 5.32788 29.906 5.01709 29.7062C4.86169 29.5952 4.75069 29.4398 4.71739 29.2622C4.68409 29.0846 4.71739 28.8959 4.81729 28.7405C5.49438 27.7082 6.30467 26.7204 7.24817 25.7991C6.64877 25.1997 6.11598 24.5559 5.67198 23.8677C5.08369 24.2895 4.53979 24.7557 4.07359 25.2552C3.8183 25.5216 3.3743 25.5438 3.0968 25.2885C2.81931 25.0332 2.80821 24.5892 3.0635 24.3117C3.6407 23.7012 4.28449 23.1351 5.00599 22.6467C4.40659 21.3813 4.07359 20.1048 4.007 18.8283C3.9071 16.7637 4.46209 14.788 5.08369 12.79C5.09065 12.7663 5.0983 12.7409 5.10631 12.7143C5.16215 12.5291 5.23491 12.2877 5.20578 12.1906C5.19468 12.1462 5.15028 12.0574 5.10589 11.9908C5.10589 11.9797 5.05039 11.8687 5.05039 11.8687C4.40659 10.57 4.11799 8.51653 5.01709 7.07354C5.0225 7.06493 5.02793 7.05628 5.03337 7.04762C5.27325 6.66555 5.54024 6.24031 6.09378 6.20775H6.19368H6.24917C6.36572 6.20775 6.4795 6.20497 6.59327 6.2022C6.70705 6.19942 6.82082 6.19665 6.93737 6.19665C7.34807 6.17445 7.68106 6.17445 8.02516 6.18555C9.47925 6.22995 10.9111 6.64065 12.1654 7.37324C13.9192 6.57405 15.9061 6.22995 17.9152 6.36315C19.9021 6.22995 21.8889 6.57405 23.6427 7.37324C24.897 6.64065 26.3289 6.22995 27.783 6.18555C28.0582 6.16887 28.3335 6.17099 28.604 6.17307C28.6935 6.17376 28.7825 6.17445 28.8708 6.17445C29.1483 6.18555 29.4258 6.18555 29.6922 6.18555C30.4248 6.18555 30.8244 7.04024 30.9576 7.32884C31.2462 7.95043 31.3127 8.63863 31.346 9.10482C31.3904 10.0039 31.1462 10.7365 30.8799 11.5135L30.7689 11.8354C30.7689 11.8484 30.746 11.8881 30.7271 11.9209C30.7137 11.9442 30.7023 11.964 30.7023 11.9686C30.6579 12.0463 30.6135 12.1462 30.6024 12.1795C30.5802 12.3016 30.669 12.6013 30.7245 12.7789C31.346 14.788 31.901 16.7526 31.8011 18.8172C31.7345 20.0604 31.4126 21.3147 30.8466 22.5357ZM25.7184 21.3258C25.785 20.9373 26.1513 20.7042 26.5287 20.7708C27.4167 20.9373 28.3047 21.2148 29.1483 21.6033C29.5701 20.6487 29.8143 19.683 29.8587 18.7284C29.9475 16.9857 29.4369 15.1987 28.8708 13.3672C28.7376 12.9454 28.56 12.3571 28.7265 11.7022C28.7931 11.4469 28.9041 11.2249 28.9929 11.0695C29.448 10.1482 29.5146 9.06042 29.1594 8.13913H29.0595H28.8042H28.7265C28.4379 8.12803 28.1493 8.11693 27.8496 8.12803C26.5842 8.17243 25.2966 8.58313 24.2421 9.28242C23.9535 9.48222 23.565 9.50442 23.2542 9.33792C22.1331 8.76073 20.9121 8.41663 19.6024 8.32783C18.2149 8.22793 16.8607 8.16133 15.5176 8.37223C14.452 8.54983 13.453 8.87172 12.5539 9.33792C12.2431 9.49332 11.8546 9.48222 11.566 9.28242C10.5115 8.58313 9.23505 8.17243 7.95856 8.12803C7.65886 8.11693 7.34807 8.11693 7.04837 8.13913H7.00397H6.74867H6.64877C6.30467 9.04932 6.34907 10.1371 6.78197 10.9918C6.90407 11.2249 7.01507 11.4469 7.08167 11.7022C7.2544 12.3391 7.08064 12.9026 6.94844 13.3313C6.94471 13.3433 6.94102 13.3553 6.93737 13.3672C6.37127 15.1987 5.87178 16.9857 5.94948 18.7395C5.99388 19.7274 6.24918 20.7153 6.69317 21.6921C7.59226 21.2703 8.52465 20.9595 9.46815 20.7819C9.84554 20.7153 10.2007 20.9595 10.2784 21.3369C10.345 21.7143 10.1008 22.0695 9.72344 22.1472C8.92425 22.3026 8.13616 22.5579 7.35917 22.9131C7.74766 23.4903 8.20276 24.0342 8.72445 24.5337C9.55695 23.8677 10.2784 23.3793 10.9888 22.9686C11.1442 22.8798 11.3329 22.8576 11.5105 22.902C11.6881 22.9575 11.8435 23.0685 11.9323 23.235C12.0211 23.3904 12.0433 23.5791 11.9989 23.7567C11.9545 23.9343 11.8435 24.0897 11.677 24.1785C11.0887 24.5115 10.5004 24.9111 9.82334 25.4328L10.0564 25.5993C11.2219 26.3652 12.6205 26.8869 14.3188 27.1755C17.5933 27.7415 22.233 27.9302 25.7739 25.5993C25.8294 25.5604 25.8821 25.5188 25.9349 25.4772C25.9876 25.4355 26.0403 25.3939 26.0958 25.3551C25.4742 24.8889 24.897 24.5004 24.3309 24.1785C24.1755 24.0786 24.0534 23.9343 24.009 23.7567C23.9646 23.5791 23.9868 23.3904 24.0756 23.235C24.1644 23.0685 24.3198 22.9464 24.4974 22.902C24.675 22.8576 24.8637 22.8798 25.0191 22.9686C25.6962 23.3571 26.3844 23.8344 27.1725 24.4449C27.6831 23.9454 28.1271 23.4015 28.4934 22.8354C27.7719 22.5135 27.0282 22.2804 26.2734 22.1361C25.896 22.0695 25.6518 21.7032 25.7184 21.3258ZM7.63667 8.70523C8.20276 8.78293 8.74666 8.97162 9.23505 9.24912C9.37935 9.33792 9.47925 9.47112 9.49035 9.63762C9.52365 9.80412 9.47925 9.97062 9.36825 10.0927L8.52466 11.0917C8.42476 11.2249 8.26936 11.2915 8.10286 11.2915C7.96966 11.2915 7.84757 11.2471 7.74767 11.1583C7.63667 11.0584 7.57007 10.9252 7.54787 10.7809C7.53677 10.6366 7.58117 10.4923 7.68107 10.3702L8.05846 9.92622C7.88087 9.87072 7.69217 9.82632 7.50347 9.80412C7.19267 9.77082 6.98177 9.48222 7.02617 9.18252C7.05947 8.88283 7.33697 8.67193 7.63667 8.70523ZM23.0875 19.3611C22.5658 18.6063 22.5436 17.7072 23.0542 17.352C23.5648 17.0079 24.3973 17.3298 24.9301 18.0735C25.4518 18.8283 25.474 19.7274 24.9634 20.0826C24.4528 20.4378 23.6203 20.1159 23.0875 19.3611ZM10.8556 20.0938C10.345 19.7386 10.3561 18.8395 10.8889 18.0847C11.4106 17.3299 12.2542 17.008 12.7648 17.3632C13.2754 17.7184 13.2643 18.6175 12.7315 19.3723C12.1987 20.1271 11.3662 20.4489 10.8556 20.0938ZM21.3115 21.4701C21.0118 21.4146 20.7232 21.5922 20.6677 21.8586C20.6011 22.1694 20.3236 22.3026 20.1682 22.347C19.8352 22.4469 19.4467 22.3914 19.2025 22.2027C18.925 21.9918 18.8029 21.57 18.8251 20.9928C19.258 20.793 19.5577 20.46 19.5577 20.0604C19.5577 19.4499 18.8917 18.9504 18.0814 18.9504C17.2711 18.9504 16.6051 19.4499 16.6051 20.0604C16.6051 20.46 16.9048 20.8041 17.3377 20.9928C17.3599 21.5811 17.2378 21.9918 16.9492 22.2027C16.705 22.3914 16.3165 22.4469 15.9835 22.347C15.8281 22.3026 15.5506 22.1694 15.484 21.8586C15.4285 21.5922 15.1288 21.4146 14.8402 21.4701C14.5405 21.5256 14.3408 21.7809 14.3963 22.0473C14.5183 22.6356 14.9623 23.0796 15.6172 23.2905C15.8392 23.3571 16.0834 23.4015 16.3165 23.4015C16.8049 23.4015 17.2933 23.2572 17.6707 22.9686C17.8372 22.8465 17.9704 22.6911 18.0814 22.5246C18.1924 22.6911 18.3256 22.8465 18.4921 22.9686C18.8584 23.2461 19.3468 23.4015 19.8463 23.4015C20.0794 23.4015 20.3236 23.3682 20.5456 23.2905C21.2005 23.0907 21.6445 22.6356 21.7666 22.0473C21.811 21.7809 21.6112 21.5256 21.3115 21.4701ZM28.7928 9.18252C28.7484 8.88283 28.4709 8.67193 28.1712 8.70523C27.6162 8.78293 27.0612 8.97162 26.584 9.24912C26.4397 9.33792 26.3398 9.47112 26.3176 9.63762C26.2843 9.80412 26.3287 9.97062 26.4397 10.0927L27.2832 11.0917C27.3942 11.2138 27.5385 11.2915 27.705 11.2915C27.8382 11.2915 27.9603 11.2471 28.0602 11.1583C28.1712 11.0584 28.2378 10.9252 28.26 10.7809C28.2711 10.6366 28.2267 10.4923 28.1268 10.3702L27.7494 9.92622C27.9381 9.87072 28.1157 9.82632 28.3044 9.80412C28.6152 9.77082 28.8261 9.48222 28.7928 9.18252Z"
          fill={fillColor} />
      </svg>
    </IconButton>
  )
}

export const FilterDogButton = ({ value  , isSelected , onClick}: FilterButtonProps & ButtonProps) => {


  const ctx = useContext(Ctx)

  const fillColor = isSelected ? ctx.selectedColor : ctx.unselectedColor
  const bgColor = isSelected ? ctx.bgSelectedColor : ctx.bgDefaultColor

  return (
    <IconButton aria-label={"filter-dog"} boxSize="20" shadow="sm" bgColor={bgColor} rounded="20" _hover={{ bgColor: bgColor }} m="8px" onClick={onClick} value={value}>
      <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg" >
        <g clipPath="url(#clip0_428_3552)">
          <path d="M12.4805 16.131C11.9198 16.9253 11.9081 17.8715 12.4455 18.2453C12.9828 18.6191 13.8589 18.2804 14.4196 17.486C14.9803 16.6917 14.992 15.7455 14.4547 15.3717C13.9173 14.9979 13.0295 15.3367 12.4805 16.131Z" fill={fillColor} />
          <path d="M23.7531 16.131C23.1924 15.3367 22.3163 14.9979 21.779 15.3717C21.2416 15.7455 21.265 16.6917 21.814 17.486C22.3747 18.2804 23.2508 18.6191 23.7881 18.2453C24.3255 17.8715 24.3021 16.9253 23.7531 16.131Z" fill={fillColor} />
          <path d="M31.3463 23.537L31.101 22.4039C30.7856 20.9554 30.4702 19.4719 30.3301 18C30.295 17.5912 30.2717 17.1823 30.26 16.7735C30.2483 16.4698 30.2366 16.166 30.2249 15.8506V15.6754C30.1665 13.5144 30.1081 11.2832 29.1386 9.23898C27.9237 6.69244 25.1202 5.29068 22.597 5.9682C21.3237 4.95192 19.8752 4.35617 18.4267 4.25103C18.3683 4.22767 18.2866 4.19263 18.1931 4.19263C18.123 4.19263 18.0997 4.19263 18.0529 4.20431H17.9361C17.9011 4.19263 17.8544 4.19263 17.8076 4.19263C17.7375 4.19263 17.6675 4.21599 17.6675 4.22767C16.1606 4.32112 14.6887 4.92855 13.4038 5.9682C10.8806 5.29068 8.07705 6.69244 6.86218 9.23898C5.89263 11.2832 5.83422 13.5144 5.77581 15.6754V15.8506C5.76413 16.166 5.76413 16.4698 5.74077 16.7735C5.72909 17.1823 5.70573 17.5912 5.67068 18C5.54219 19.4719 5.21511 20.9671 4.89971 22.4156L4.6544 23.537C4.32732 24.9972 3.95352 26.6559 4.16378 28.2563C4.47918 30.5224 6.19634 31.7139 9.28023 31.8074H9.45545C12.0254 31.8074 13.4738 29.9734 14.4434 28.303C15.2144 28.4432 15.997 28.5132 16.8264 28.5132H17.6091C18.894 28.5249 20.2374 28.5366 21.5457 28.303C22.5152 29.9734 23.9637 31.8074 26.5336 31.8074C26.592 31.8074 26.6504 31.8074 26.7088 31.8074C29.7927 31.7139 31.5099 30.5108 31.8253 28.2563C32.0589 26.6559 31.6734 24.9972 31.3463 23.537ZM9.33863 30.0552C7.11917 29.9851 6.09121 29.3777 5.90431 28.0109C5.72909 26.7377 6.05617 25.3009 6.35988 23.9108L6.60519 22.7777C6.93227 21.2825 7.27103 19.7289 7.41121 18.1402C7.44625 17.708 7.46961 17.2641 7.49298 16.8202C7.50466 16.4464 7.51634 16.0726 7.52802 15.6988C7.57475 13.7246 7.63315 11.6804 8.45085 9.97491C9.10501 8.5965 10.4484 7.66199 11.8384 7.54518C11.6866 7.75545 11.5464 7.94235 11.4296 8.11757C9.89934 10.4422 9.37368 13.199 9.08164 15.36C9.03492 15.6754 8.99987 15.9908 8.96483 16.3062L8.94147 16.4814C8.84802 17.2407 8.75457 18.0117 8.61439 18.771L8.48589 19.4368C8.2289 20.7335 7.93687 22.1936 8.40412 23.6538C8.87138 25.1373 10.0512 26.4807 11.6282 27.3451C11.9436 27.5203 12.2823 27.6722 12.7029 27.824C11.6749 29.4478 10.6937 30.0902 9.33863 30.0552ZM18.9407 26.8194V23.9341C20.0855 23.6421 20.9266 22.8361 20.9266 21.8665C20.9266 20.6517 19.6182 19.6704 18.0062 19.6704C16.3942 19.6704 15.0859 20.6517 15.0859 21.8665C15.0859 22.9412 16.1255 23.829 17.4806 24.0159V26.7844C15.7517 26.726 13.9761 26.6325 12.4692 25.8032C11.3011 25.1607 10.4016 24.1561 10.0746 23.1165C9.74748 22.0885 9.98111 20.9087 10.2147 19.7172C10.2615 19.5069 10.2965 19.2966 10.3316 19.0864C10.4717 18.3154 10.5652 17.5211 10.6703 16.6917L10.6937 16.5048C10.7287 16.2011 10.7638 15.8857 10.8105 15.582C11.0792 13.6195 11.5581 11.0963 12.8898 9.07544C14.1514 7.1597 16.1022 5.9682 17.9945 5.94483C19.8869 5.9682 21.8494 7.17138 23.111 9.07544C24.4427 11.0963 24.9216 13.6195 25.1903 15.582C25.237 15.8857 25.272 16.2011 25.3071 16.5048L25.3421 16.7501C25.4356 17.5094 25.5407 18.3037 25.6692 19.0864C25.7042 19.2966 25.751 19.5069 25.7977 19.7756C26.0196 20.9204 26.2533 22.1002 25.9262 23.1165C25.5991 24.1561 24.6996 25.1607 23.5315 25.8032C22.0597 26.6209 20.3892 26.7961 18.9407 26.8194ZM30.0964 28.0109C29.9095 29.3777 28.8816 29.9851 26.6621 30.0552C25.3655 30.1019 24.3258 29.4127 23.3096 27.824C23.7184 27.6722 24.0689 27.5203 24.3842 27.3451C25.9612 26.4807 27.1411 25.1373 27.6083 23.6538C28.0639 22.2053 27.7835 20.7335 27.5265 19.4368L27.398 18.7827C27.2579 18.0234 27.1644 17.2407 27.071 16.4814L27.0476 16.3062C27.0126 15.9908 26.9658 15.6754 26.9308 15.36C26.6388 13.2106 26.1131 10.4422 24.5828 8.12925C24.466 7.94235 24.3258 7.76713 24.1857 7.58023C25.5758 7.69704 26.9074 8.63155 27.5616 10.01C28.3793 11.7154 28.426 13.7597 28.4844 15.7338C28.4961 16.1076 28.5078 16.4814 28.5195 16.8552C28.5428 17.2991 28.5545 17.7313 28.6012 18.1635C28.7414 19.7522 29.0802 21.3058 29.4072 22.8011L29.6526 23.9341C29.9563 25.3125 30.2717 26.7377 30.0964 28.0109Z"
            fill={fillColor} />
        </g>
      </svg>
    </IconButton>
  )
}

export const FilterNoneButton = ({ value  , isSelected , onClick}: FilterButtonProps & ButtonProps) => {

  const ctx = useContext(Ctx)

  const fillColor = isSelected ? ctx.selectedColor : ctx.unselectedColor
  const bgColor = isSelected ? ctx.bgSelectedColor : ctx.bgDefaultColor

  return (
    <IconButton aria-label={"filter-none"} boxSize="20" shadow="sm" bgColor={bgColor} rounded="20" _hover={{ bgColor: bgColor }} color={fillColor} m="8px" onClick={onClick} value={value}>
      <Text  color={fillColor} >不拘</Text>
    </IconButton>
  )
}


export const FilterMaleButton = ({ value  , isSelected , onClick}: FilterButtonProps & ButtonProps) => {


  const ctx = useContext(Ctx)

  const fillColor = isSelected ? ctx.selectedColor : ctx.maleIconColor
  const bgColor = isSelected ? ctx.bgSelectedColor : ctx.bgDefaultColor

  return (
    <IconButton aria-label={"filter-dog"} boxSize="20" shadow="sm" bgColor={bgColor} rounded="20" _hover={{ bgColor: bgColor }} m="8px" onClick={onClick} value={value}>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M16.0545 9.18127L17.8585 7.3772L17.9121 8.69112C17.9203 8.91354 18.1057 9.08241 18.3281 9.07418L19.4649 9.02475C19.6873 9.01651 19.8562 8.83116 19.848 8.60874L19.6791 4.53516C19.6708 4.31274 19.4855 4.14387 19.2631 4.15211L15.1895 4.32098C14.9671 4.32922 14.7982 4.51457 14.8064 4.73699L14.8559 5.8738C14.8641 6.09622 15.0494 6.2651 15.2719 6.25686L16.5611 6.20331L14.8188 7.9456C11.7337 5.47015 7.21532 5.66374 4.35269 8.52636C1.28 11.5991 1.28 16.5747 4.35269 19.6474C7.42538 22.7201 12.4051 22.7159 15.4737 19.6474C18.3363 16.7847 18.5299 12.2663 16.0545 9.18127ZM6.00025 17.9998C3.84195 15.8415 3.84195 12.3322 6.00025 10.1739C8.15855 8.01562 11.6678 8.01562 13.8261 10.1739C15.9844 12.3322 15.9844 15.8415 13.8261 17.9998C11.6678 20.1581 8.15855 20.1581 6.00025 17.9998Z"
          fill={fillColor} />
      </svg>

    </IconButton>
  )
}
export const FilterFemaleButton = ({ value  , isSelected,   onClick}: FilterButtonProps & ButtonProps) => {


  const ctx = useContext(Ctx)

  const fillColor = isSelected ? ctx.selectedColor : ctx.femaleIconColor
  const bgColor = isSelected ? ctx.bgSelectedColor : ctx.bgDefaultColor


  return (
    <IconButton aria-label={"filter-dog"} boxSize="20" shadow="sm" bgColor={bgColor} rounded="20" _hover={{ bgColor: bgColor }} m="8px" onClick={onClick} value={value}>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M19.8504 9.09536C19.8504 4.75731 16.3381 1.245 12 1.245C7.66197 1.245 4.14966 4.75731 4.14966 9.09536C4.14966 13.1601 7.24328 16.5038 11.2034 16.905V18.8705H9.55187C9.27856 18.8705 9.05759 19.0915 9.05759 19.3648V20.1208C9.05759 20.3941 9.27856 20.615 9.55187 20.615H11.2034V22.2142C11.2034 22.5166 11.4243 22.755 11.6976 22.755H12.4536C12.7269 22.755 12.9479 22.5108 12.9479 22.2142V20.615H14.5994C14.8727 20.615 15.0936 20.3941 15.0936 20.1208V19.3648C15.0936 19.0915 14.8727 18.8705 14.5994 18.8705H12.9479L12.9479 16.8818C16.8324 16.4166 19.8504 13.1078 19.8504 9.09536ZM6.47569 9.09536C6.47569 6.04826 8.95292 3.57103 12 3.57103C15.0471 3.57103 17.5244 6.04826 17.5244 9.09536C17.5244 12.1425 15.0471 14.6197 12 14.6197C8.95292 14.6197 6.47569 12.1425 6.47569 9.09536Z" 
        fill={fillColor} />
      </svg>
    </IconButton>
  )
}




//new

export const CatIconBtn = (props : IconButtonProps) => {


  return (
    <IconButton {...props}>
      <svg width="37" height="37" viewBox="0 0 37 37"  xmlns="http://www.w3.org/2000/svg">
      <path fillRule="evenodd" clipRule="evenodd" d="M29.6472 22.4016C30.3214 22.8543 30.9282 23.3648 31.4579 23.9331C31.6891 24.1739 31.6698 24.5591 31.4194 24.7999C31.1882 25.0214 30.7933 25.0022 30.5718 24.771C30.1287 24.2894 29.6279 23.856 29.0693 23.4804C28.6936 24.0679 28.2506 24.6362 27.7305 25.1563C28.578 25.975 29.31 26.8611 29.9265 27.7954C30.0132 27.9302 30.042 28.0939 30.0132 28.248C29.9843 28.4118 29.8879 28.5466 29.7531 28.6333C29.6568 28.6911 29.5412 28.7296 29.4256 28.7296C29.2234 28.7296 29.0404 28.6333 28.9248 28.4599C28.3372 27.5642 27.6341 26.7262 26.8443 25.9653C26.7984 25.9998 26.7497 26.037 26.6988 26.0759C26.5363 26.2001 26.3512 26.3415 26.1605 26.4662C24.5327 27.5353 22.5101 28.1517 20.1503 28.2866C17.2897 28.4503 13.6104 28.4021 10.6728 26.4662C10.4726 26.3388 10.2896 26.1942 10.1157 26.0568C10.1055 26.0488 10.0954 26.0408 10.0853 26.0328C9.31472 26.784 8.63087 27.5931 8.07224 28.4503C7.88923 28.72 7.50397 28.797 7.23428 28.6237C7.09944 28.5274 7.00312 28.3925 6.97423 28.2384C6.94533 28.0843 6.97423 27.9206 7.06091 27.7857C7.64844 26.89 8.35155 26.0328 9.17025 25.2333C8.65014 24.7132 8.18782 24.1546 7.80255 23.5574C7.29207 23.9234 6.82012 24.328 6.41559 24.7614C6.19406 24.9925 5.8088 25.0118 5.568 24.7903C5.32721 24.5688 5.31758 24.1835 5.53911 23.9427C6.03996 23.413 6.59859 22.9217 7.22465 22.4979C6.70454 21.3999 6.41559 20.2923 6.3578 19.1847C6.27112 17.3932 6.7527 15.6787 7.29207 13.945C7.29811 13.9245 7.30476 13.9025 7.31171 13.8794C7.36016 13.7186 7.42329 13.5092 7.39802 13.4249C7.38839 13.3864 7.34986 13.3093 7.31133 13.2516C7.31133 13.2419 7.26318 13.1456 7.26318 13.1456C6.70454 12.0187 6.45412 10.2368 7.23428 8.98473C7.23898 8.97726 7.24369 8.96976 7.24841 8.96224C7.45656 8.63071 7.68823 8.26172 8.16855 8.23346H8.25524H8.3034C8.40453 8.23346 8.50325 8.23106 8.60198 8.22865C8.7007 8.22624 8.79943 8.22383 8.90056 8.22383C9.25693 8.20457 9.54588 8.20457 9.84446 8.2142C11.1062 8.25273 12.3487 8.6091 13.4371 9.24479C14.9589 8.55131 16.6829 8.25273 18.4263 8.36831C20.1503 8.25273 21.8744 8.55131 23.3962 9.24479C24.4846 8.6091 25.7271 8.25273 26.9888 8.2142C27.2277 8.19973 27.4665 8.20157 27.7013 8.20338C27.7789 8.20397 27.8561 8.20457 27.9327 8.20457C28.1735 8.2142 28.4143 8.2142 28.6455 8.2142C29.2811 8.2142 29.6279 8.95584 29.7435 9.20626C29.9939 9.74563 30.0517 10.3428 30.0806 10.7473C30.1191 11.5275 29.9072 12.1632 29.676 12.8374L29.5797 13.1167C29.5797 13.128 29.5599 13.1624 29.5435 13.1909C29.5319 13.2111 29.5219 13.2283 29.5219 13.2323C29.4834 13.2997 29.4449 13.3864 29.4353 13.4153C29.416 13.5212 29.493 13.7813 29.5412 13.9354C30.0806 15.6787 30.5622 17.3835 30.4755 19.175C30.4177 20.2538 30.1384 21.3421 29.6472 22.4016ZM25.1973 21.3518C25.2551 21.0147 25.573 20.8124 25.9004 20.8702C26.671 21.0147 27.4415 21.2555 28.1735 21.5926C28.5395 20.7642 28.7514 19.9263 28.7899 19.098C28.867 17.5858 28.4239 16.0351 27.9327 14.4459C27.8171 14.0799 27.663 13.5694 27.8075 13.0011C27.8653 12.7796 27.9616 12.587 28.0387 12.4521C28.4336 11.6527 28.4914 10.7088 28.1831 9.90937H28.0965H27.8749H27.8075C27.5571 9.89974 27.3067 9.89011 27.0466 9.89974C25.9486 9.93827 24.8313 10.2946 23.9163 10.9014C23.6659 11.0748 23.3288 11.0941 23.0591 10.9496C22.0863 10.4487 21.0268 10.1502 19.8903 10.0731C18.6863 9.98643 17.5113 9.92864 16.3458 10.1116C15.4212 10.2657 14.5543 10.5451 13.7742 10.9496C13.5045 11.0844 13.1674 11.0748 12.917 10.9014C12.002 10.2946 10.8943 9.93827 9.78667 9.89974C9.52662 9.89011 9.25693 9.89011 8.99688 9.90937H8.95835H8.73682H8.65014C8.35155 10.6992 8.39008 11.6431 8.76572 12.3847C8.87166 12.587 8.96798 12.7796 9.02577 13.0011C9.17565 13.5538 9.02488 14.0427 8.91016 14.4147C8.90693 14.4252 8.90373 14.4356 8.90056 14.4459C8.40934 16.0351 7.97592 17.5858 8.04334 19.1076C8.08187 19.9648 8.3034 20.822 8.68866 21.6696C9.46883 21.3036 10.2779 21.0339 11.0966 20.8798C11.4241 20.822 11.7323 21.0339 11.7997 21.3614C11.8575 21.6889 11.6456 21.9971 11.3181 22.0645C10.6246 22.1994 9.94078 22.4209 9.26656 22.7291C9.60367 23.2299 9.99857 23.7019 10.4513 24.1353C11.1736 23.5574 11.7997 23.1336 12.4161 22.7773C12.551 22.7002 12.7147 22.6809 12.8688 22.7195C13.0229 22.7676 13.1578 22.8639 13.2348 23.0084C13.3119 23.1433 13.3311 23.307 13.2926 23.4611C13.2541 23.6152 13.1578 23.7501 13.0133 23.8271C12.5028 24.1161 11.9923 24.4628 11.4048 24.9155L11.6071 25.06C12.6184 25.7246 13.832 26.1772 15.3056 26.4277C18.147 26.9189 22.173 27.0826 25.2455 25.06C25.2936 25.0263 25.3394 24.9901 25.3851 24.954C25.4309 24.9179 25.4766 24.8818 25.5248 24.8481C24.9854 24.4435 24.4846 24.1064 23.9934 23.8271C23.8585 23.7404 23.7526 23.6152 23.7141 23.4611C23.6755 23.307 23.6948 23.1433 23.7718 23.0084C23.8489 22.8639 23.9837 22.758 24.1378 22.7195C24.2919 22.6809 24.4557 22.7002 24.5905 22.7773C25.1781 23.1144 25.7752 23.5285 26.4591 24.0583C26.9021 23.6248 27.2874 23.1529 27.6052 22.6617C26.9792 22.3824 26.3339 22.1801 25.6789 22.0549C25.3514 21.9971 25.1395 21.6793 25.1973 21.3518ZM9.50738 10.4005C9.99859 10.468 10.4705 10.6317 10.8943 10.8725C11.0195 10.9495 11.1062 11.0651 11.1159 11.2096C11.1448 11.3541 11.1062 11.4985 11.0099 11.6045L10.2779 12.4713C10.1912 12.5869 10.0564 12.6447 9.91191 12.6447C9.79633 12.6447 9.69038 12.6062 9.6037 12.5291C9.50738 12.4424 9.44959 12.3269 9.43033 12.2017C9.42069 12.0764 9.45922 11.9512 9.54591 11.8453L9.87338 11.46C9.71928 11.4119 9.55554 11.3733 9.3918 11.3541C9.12211 11.3252 8.93911 11.0748 8.97764 10.8147C9.00653 10.5546 9.24733 10.3716 9.50738 10.4005ZM22.9146 19.6469C22.4619 18.992 22.4427 18.2118 22.8857 17.9036C23.3288 17.605 24.0511 17.8844 24.5135 18.5297C24.9662 19.1846 24.9854 19.9648 24.5424 20.273C24.0993 20.5812 23.3769 20.3019 22.9146 19.6469ZM12.3006 20.2827C11.8575 19.9745 11.8671 19.1943 12.3295 18.5393C12.7821 17.8844 13.5141 17.6051 13.9572 17.9133C14.4003 18.2215 14.3906 19.0017 13.9283 19.6566C13.466 20.3116 12.7436 20.5909 12.3006 20.2827ZM21.3736 21.477C21.1135 21.4288 20.8631 21.583 20.8149 21.8141C20.7571 22.0838 20.5164 22.1994 20.3815 22.2379C20.0926 22.3246 19.7555 22.2764 19.5436 22.1127C19.3028 21.9297 19.1968 21.5637 19.2161 21.0628C19.5917 20.8895 19.8518 20.6005 19.8518 20.2538C19.8518 19.724 19.2739 19.2906 18.5708 19.2906C17.8676 19.2906 17.2897 19.724 17.2897 20.2538C17.2897 20.6005 17.5498 20.8991 17.9254 21.0628C17.9447 21.5733 17.8388 21.9297 17.5883 22.1127C17.3764 22.2764 17.0393 22.3246 16.7504 22.2379C16.6155 22.1994 16.3747 22.0838 16.317 21.8141C16.2688 21.583 16.0087 21.4288 15.7583 21.477C15.4983 21.5252 15.3249 21.7467 15.373 21.9778C15.479 22.4883 15.8643 22.8736 16.4325 23.0566C16.6252 23.1144 16.8371 23.1529 17.0393 23.1529C17.4631 23.1529 17.8869 23.0277 18.2144 22.7773C18.3589 22.6713 18.4744 22.5365 18.5708 22.392C18.6671 22.5365 18.7827 22.6713 18.9271 22.7773C19.245 23.0181 19.6688 23.1529 20.1022 23.1529C20.3045 23.1529 20.5164 23.124 20.709 23.0566C21.2773 22.8832 21.6625 22.4883 21.7685 21.9778C21.807 21.7467 21.6336 21.5252 21.3736 21.477ZM27.8653 10.8147C27.8268 10.5546 27.586 10.3716 27.3259 10.4005C26.8443 10.468 26.3628 10.6317 25.9486 10.8725C25.8234 10.9495 25.7367 11.0651 25.7174 11.2096C25.6885 11.3541 25.7271 11.4985 25.8234 11.6045L26.5554 12.4713C26.6517 12.5773 26.7769 12.6447 26.9214 12.6447C27.037 12.6447 27.1429 12.6062 27.2296 12.5291C27.3259 12.4424 27.3837 12.3269 27.403 12.2017C27.4126 12.0764 27.3741 11.9512 27.2874 11.8453L26.9599 11.46C27.1237 11.4119 27.2778 11.3733 27.4415 11.3541C27.7112 11.3252 27.8942 11.0748 27.8653 10.8147Z" 
        fill="currentColor"/>
      </svg>
    </IconButton>
  ) 
}